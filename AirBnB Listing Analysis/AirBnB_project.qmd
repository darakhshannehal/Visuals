---
title: "AirBnB Listing Analysis"
format: html
editor: visual
execute:
  warning: false
---

```{r}
# Import libraries
library(tidyverse)
library(skimr)
library(patchwork)
```

### Profile and QA the Data

```{r}
# Load data
Listing = read_csv("E:\\Data\\Listings.csv")

# Check data types
glimpse(Listing)

# Convert host_since column to Date format
Listing = Listing %>%
mutate(host_since = as.Date(host_since, format = "%Y-%m-%d"))

# Filter down to only Paris Listings
#select only columns of interest
Listing = Listing %>%
filter(city == "Paris") %>% 
select(host_since, neighbourhood, city, accommodates, price)
head(Listing)
```

### Check for missing values

```{r}
colSums(is.na(Listing))

# % of missing values
colSums(is.na(Listing))/nrow(Listing)*100

# Remove missing values in host_since column, as it's a very small fraction of data, but impacts the charts below
Listing = Listing %>% 
  filter(!is.na(host_since))

```

### EDA

```{r}
Listing %>% 
count(neighbourhood)

skim(Listing)       # for max, min & avg of numeric columns

# For zero minimum value price & accommodates columns
colSums(Listing == 0) # These are a small fraction of the data, but for charts below, zero accommodations will be removed

```

### Prepare the data for Visualization

```{r}

paris_listings_neighbourhood = Listing %>% 
group_by(neighbourhood) %>% 
summarise(mean_price = mean(price)) %>% 
arrange(mean_price)

paris_listings_neighbourhood

# Filtering down for the most expensive neighbourhood
paris_listings_neighbourhood %>% 
  arrange(desc(mean_price)) %>% 
  slice(1)
 
paris_listings_accommodations = Listing %>% 
  filter(neighbourhood == "Elysee") %>% 
  group_by(accommodates) %>% 
  summarise(mean_price = mean(price)) %>% 
  arrange(mean_price) 

# Extract the year from host_since column and create a new year column 
paris_listings_over_time = Listing %>%
  mutate(year = format(as.Date(host_since), "%Y"))

paris_listings_over_time <- Listing %>%
  group_by(year = format(as.Date(host_since), "%Y")) %>%
  summarise(
    new_hosts = n(), 
    mean_price = mean(price)) 

```

### Visualize the data

```{r}
# Define a custom theme
custom_theme <- theme_minimal() +
  theme(text = element_text(family = "Times New Roman"),
    axis.text = element_text(size = 12, colour = "#000000"),
    axis.title = element_text(size = 13),
    panel.grid = element_blank(),
    axis.line = element_line(linewidth = 0.5, color = "black"),
    axis.ticks = element_line(linewidth = 0.5, color = "black"),
    plot.title = element_text(size = 12, face = "bold", hjust = 0.5))

# Apply the custom theme globally
theme_set(custom_theme)
```

```{r}
plot1 = paris_listings_neighbourhood %>% 
ggplot(aes(x = mean_price, y = reorder(neighbourhood, mean_price))) +
  geom_bar(stat = "identity", fill = "steelblue2", width = 0.65) +
  labs(title = "Average Listing Price by Paris Neighbourhood",
    x = "Average Price per Night (Euros)",
    y = NULL)

print(plot1)

# Removing zero accommodations
paris_listings_accommodations = paris_listings_accommodations %>% 
  filter(!accommodates == 0)

plot2 = paris_listings_accommodations %>% 
  ggplot(aes(x = mean_price, y = reorder(accommodates, mean_price))) +
  geom_bar(fill = "steelblue2", stat = "identity", width = 0.65) +
  labs(
    title = "Average Listing Price by Accommodation Number",
    x = "Average Price per Night (Euros)",
    y = "Accommodation Capacity")

print(plot2)

# Check data types
glimpse(paris_listings_over_time)

# Ensure the year column is numeric
paris_listings_over_time$year = as.numeric(paris_listings_over_time$year)

plot3 =  paris_listings_over_time %>% 
  ggplot(aes(x = year, y = new_hosts)) +
  geom_line(color="blue4", linewidth = 1) +
  labs(
    title = "New AirBnB hosts in Paris over time",
    x = "Year",
    y = "Number of New hosts")

print(plot3)

plot4 = paris_listings_over_time %>% 
  ggplot(aes(x = year, y = mean_price)) +
  geom_line(color= "orange3", linewidth = 1 ) + 
  labs(
    title = "Average AirBnB price over time",
    x = "Year",
    y = "Average Price (Euros)")
print(plot4)

# dual axis line chart
dual_axis_chart = paris_listings_over_time %>%
  ggplot(aes(x = year)) +
  geom_line(aes(y = new_hosts), # Primary y-axis
            color = "blue4", linewidth =1) +
  geom_line(aes(y = mean_price *75), color = "orange3", linewidth = 1) +  # Secondary y-axis after scaling
  scale_y_continuous(
    name = "New Hosts" , # Primary y-axis label
    sec.axis = sec_axis(transform = ~ . /75,
                        name = "Average Price")) + # sec.axis argument for Secondary y-axis label
  labs(title = "2015 regulations lead to fewer new hosts & higher prices", 
       x = "Year") +
  # Set the color of primary and secondary y-axis labels to match the respective line colors
theme(
  axis.title.y.left = element_text(color = "blue4", size = 13), 
      axis.title.y.right = element_text(color = "orange3", size = 13),
    plot.title = element_text(hjust = 0.5))

```

```{r}
dual_axis_chart_final = dual_axis_chart +
  geom_vline(xintercept = 2015, linetype = "dashed", color = "grey3",
             linewidth = 1) +  # Vertical dashed line at 2015
  annotate("text", x = 2013, y = 1800, label = "2015 regulations
           took effect", 
           color = "grey3", vjust = 0) + 
  geom_curve(aes(x = 2013, y = 1600, xend = 2015, yend = 1000),
             color = "grey3",  
             arrow = arrow(length = unit(0.2, "cm")), 
             curvature = 0.2)

```

### Final report

```{r}

# Using patchwork package to combine all plots 
final_plot = (plot2 | plot1) /
             (dual_axis_chart_final) +
  plot_annotation(title = "Analyzing Paris AirBnB listings to determine the impact of recent regulations",
                  theme = theme(plot.title = element_text(hjust = 0.5,
                                                          size = 16, 
                                                          face = "bold", margin = margin(t = 7, r = 0, b = 20, l = 0))))

ggsave("AirBnB_report.png", final_plot,
       width = 10, height = 8, units = "in", bg = "white")
```
